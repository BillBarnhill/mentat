initSidebarItems({"enum":[["SQLTypeAffinity","Type safe representation of the possible return values from SQLite's `typeof`"]],"fn":[["parse_query",""]],"macro":[["interpose","A helper macro to sequentially process an iterable sequence, evaluating a block between each pair of items."],["interpose_iter","A helper to bind `name` to values in `across`, running `body` for each value, and running `inter` between each value. See `interpose` for examples."]],"mod":[["counter",""],["util",""]],"struct":[["DateTime","ISO 8601 combined date and time with time zone."],["Keyword","A keyword is a symbol, optionally with a namespace, that prints with a leading colon. This concept is imported from Clojure, as it features in EDN and the query syntax that we use."],["Schema","Represents a Mentat schema."],["TxReport","A transaction report summarizes an applied transaction."],["Utc","The UTC time zone. This is the most efficient time zone when you don't need the local time. It is also used as an offset (which is also a dummy type)."],["Uuid","A Universally Unique Identifier (UUID)."]],"trait":[["CachedAttributes",""],["Cloned",""],["FromMicros",""],["FromRc",""],["HasSchema",""],["SQLValueType",""],["SQLValueTypeSet","We have an enum of types, `ValueType`. It can be collected into a set, `ValueTypeSet`. Each type is associated with a type tag, which is how a type is represented in, e.g., SQL storage. Types can share type tags, because backing SQL storage is able to differentiate between some types (e.g., longs and doubles), and so distinct tags aren't necessary. That association is defined by `SQLValueType`. That trait similarly extends to `ValueTypeSet`, which maps a collection of types into a collection of tags."],["Timelike","The common set of methods for time component."],["ToMicros",""],["UpdateableCache",""]],"type":[["AttributeMap","Map attribute entids to `Attribute` instances."],["EntidMap","Map positive integer entids (`1`) to `Keyword` idents (`:db/ident`)."],["IdentMap","Map `Keyword` idents (`:db/ident`) to positive integer entids (`1`)."],["ValueRc","This type alias exists to allow us to use different boxing mechanisms for values. This type must implement `FromRc` and `Cloned`, and a `From` implementation must exist for `TypedValue`."],["ValueTypeTag",""]]});